/// Getting the color value from the map
/// @access public
/// @param {String} $color - color name 
/// @return {String}
/// @require $colors
@function setColor($color, $tone: 'base'){
	@if map-has-key($colors, $color){
		@return map-get(map-get($colors, $color), $tone);
	}@else{
		@error $error-color + ''#{$color}'';
	}
}


@function palette($color: 'primary', $scheme-variaty: $scheme-light){
	@if map-has-key($scheme-variaty, $color){
		@return map-get($scheme-variaty, $color);
	}@else{
		@error 'No color.' + $color;
	}
	
}


@function getComp($comp, $map: $grid-system){
	@return map-get($map,$comp);
}

/// Getting the z-index value from the layer name
/// @access public
/// @param {String} $layer - Имя слоя
/// @return {Number}
/// @require $z-indexes
@function z($layer){
	@if map-has-key($z-indexes, $layer){
		@return map-get($z-indexes, $layer);
	}@else{
		@error 'No layer with name '#{$layer}' in $z-indexes. The layer must be one of the '#{map-keys($z-indexes)}' .';
	}
}


@function longshadow($color_a,$color_b,$stepnum, $opacity: 1) {
	$gradient_steps: null;

	@for $i from 1 through $stepnum {
			$weight: ( ($i - 1) / $stepnum) * 100;

			$colour_mix: mix($color_b, rgba($color_a, $opacity), $weight);

			$seperator: null;

			@if ($i != $stepnum) {
					$seperator: #{","};
			}

			$gradient_steps: append(
					#{$gradient_steps},
					#{$i}px #{$i}px $colour_mix $seperator
			);
	}

	@return $gradient_steps;
}